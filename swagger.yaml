swagger: '2.0'
info:
  version: '1.0'
  title: "ProgIng2"
  description: API docs of Software Engineering project by Davide Bulbarelli, Davide Piva, Lorenzo Framba, Marco Luzzara, Morgan Malavasi
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
    
host: proging2.herokuapp.com
basePath: /v1/
schemes:
- https
consumes:
- application/json
produces:
- application/json
# tags are used for organizing operations
tags:
- name: Users
  description: Everything about user
- name: Exams
  description: Everything about exam
- name: Tasks
  description: Everything about task
- name: Answers
  description: Everything about answer
  
securityDefinitions:
   ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
    
paths:
  /Users:
    post:
      tags:
      - Users
      summary: Create a new User
      description: This feature helps to create a new user
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        201:
          description: item created
          schema:
            $ref: '#/definitions/CreateUser'
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists


  /Users/{userId}:     
    get:
      security:
        - ApiKeyAuth: []
      tags:
      - Users
      summary: Search user by ID
      description: |
        By passing the appropriate ID, the system returns the right user and all its informations.
      produces:
      - application/json
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateUser'
        400:
          description: bad input parameter
        401:
          description: not authorized 

          
          
      

  /Token:
  
    post:
      tags:
      - Users
      summary: Logs in into the account by giving the right credentials
      operationId: addPost
      description: This feature gives you the opportunity to log in into your own account
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
       
      - in: body
        name: Login 
        description: Login into your account
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: Logged in successfully 
          schema:
            type: object
            items:
              $ref: '#/definitions/Token'
          examples:
              application/json:
                token:
                  - id : 923850 
                    token: 4567
          
        400:
          description: invalid input, object invalid
        409:
          description: Could not Logging in successfully   

          
  /Token/{tokenId}:     
    delete:
      security:
        - ApiKeyAuth: []
      tags:
      - Users
      summary: logs out from the website
      operationId: DeletebyToken
      description: |
        by pressing the right button, the system will log out from the current account and you will have the choice to log in 
      produces:
      - application/json
      parameters:
      - name: "tokenId"
        in: "path"
        description: "ID of the token"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: the user logged out correctly 
          
        400:
          description: the system couldn't logged out correctly  
        401:
          description: not authorized
          
          



  /exams:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Exams
      summary: List All Exams
      responses:
        200:
          description: Return list of exams
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
          examples:
            application/json:
                exams:
                  - id : 1
                    name : Fisica
                    duration : 30m
                    deadline : 1541688393563
                    dateSubmission : 1541688789590
                    start : null
                  - id : 2
                    name : Algoritmi
                    duration : 1h
                    deadline : 1541688393563
                    dateSubmission : 1541688789590
                    start : 1541688789590
                  - id : 3
                    name : Analisi
                    duration : 45m
                    deadline : 1541688393563
                    dateSubmission : 1541688789590
                    start : 1541688789056
        400:
          description: bad input parameter
        401:
          description: not authorizexe
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Exams
      summary: Push an exam
      parameters:
        - in: body
          name : examName
          description: The user to create.
          schema:
            $ref: "#/definitions/Exam"
      responses:
        200:
          description: OK
        400:
          description: bad input parameter
        401:
          description: not authorized
                    
  /exams/{examId}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Exams
      summary: Returns an exam by ID.
      parameters:
        - in: path
          name: examId
          required: true
          type: integer
          description: Id of the exam to retrieve
      responses:
        200:
          description: Return the exam with specified ID
          schema:
            $ref: '#/definitions/Exam'
          examples:
            application/json:
                id : 3
                name : Analisi
                duration : 45m
                deadline : 1541688393563
                dateSubmission : 1541688789590
                start : 1541688789056
        400:
          description: bad input parameter
        401:
          description: not authorized
    post:
      security:
        - ApiKeyAuth: []
      tags:
      - "Exams"
      summary: "Modify an existing exam"
      description: "Modify the specified exam"
      operationId: "modifyExam"
      produces: 
      - application/json
      parameters:
      - name: "examId"
        in: "path"
        description: "ID of the exam"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: Exam created
        '400':
          description: bad input parameter
        '401':
          description: not authorized
        
    delete:
      security:
        - ApiKeyAuth: []
      tags:
      - "Exams"
      summary: "Delete an existing exam"
      description: "Delete the specified exam"
      operationId: "deleteExam"
      produces: 
      - application/json
      parameters:
      - name: "examId"
        in: "path"
        description: "ID of the exam"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: Exam deleted
        '400':
          description: bad input parameter
        '401':
          description: not authorized
          
  /tasks:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Tasks
      summary: return a list of tasks
      description: given an examId and/or a userId return a list of tasks associated 
      parameters: 
        - in: query
          name: exam
          type: integer
          description: The ID of the Exam
        - in: query
          name: user
          type: integer
          description: The Id of the User
      responses:
        '200':
          description: Return list of Tasks
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        '400':
          description: bad input parameter
        '401':
          description: not authorizexe
    post:
      security:
        - ApiKeyAuth: []
      tags: 
        - Tasks
      summary: create a new Task
      description: create a new Task
      parameters:
      - in: body
        name: task
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        '200':
          description: Task has been correctly created
        '401':
          description: apiKey not valid
        default:
          description: Bad request
      
  /tasks/{taskId}:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Tasks
      summary: Change the body of an existing task from ID
      description: Modify the specified task
      operationId: modifyTask
      produces:
        - application/json
      responses:
        '200':
          description: Task modified
        '400':
          description: bad input parameter
        '401':
          description: not authorized
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Tasks
      summary: Delete an existing task
      description: Delete the specified task
      operationId: deleteTask
      produces:
        - application/json
      responses:
        '200':
          description: task deleted
        '400':
          description: Impossible delete the existing task
        '401':
          description: not authorized
    parameters:
    - name: taskId
      in: path
      description: ID of the Task
      required: true
      type: integer
      format: int64
    
  /answers:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Answers
      summary: send answer for a task
      description: send the answer to the specified task assigned to a user
      parameters:
        - in: body
          name: answer
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: the answer has been correctly received
        '401': 
          description: apikey not valid
        default:
          description: Bad request
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Answers
      summary: delete an answer
      description: delete the answer of the specified task assigned to a user
      responses:
        '200': 
          description: the answer has been correctly deleted
        '401': 
          description: apikey not valid
        default:
          description: Bad request
    parameters:
    - name: exam
      in: query
      description: Exam Id
      type: integer
      required: true
    - name: task
      in: query
      description: Task Id
      type: integer
      required: true
    - name: user
      in: query
      description: User Id
      type: integer
      required: true   
      
definitions:
  CreateUser:
    type: object
    required:
    - name
    - lastname
    - username
    - email
    - password
    properties:
      name:
        type: string
        example: Lorenzo 
      lastname:
        type: string
        example: Framba
      username:
        type: string
        example: montresoruccio
      email:
        type: string
        example: lorenzoframba@gmail.com
      password:
        type: string
        example: oMammaMiaoMammaMia
  Login:
    type: object
    required:
    - username
    - password
    properties:
      email:
        type: string
        example: montresoruccio@studenti.unitn.it
      password:
        type: string
        example: oMammaMiaoMammaMia   
  Token:
    title: Token
    type: object
    properties:
      id:
        type: string
      token:
        type: string
        
    required:   
      - id
      
      - token
  Exam:
    title: Exam
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      duration:
        type: string
      deadline:
        type: string
      dateSubmission:
        type: string
      start:
        type: string
    required:  
      - id
      - name
      - duration
      - deadline
      - dateSubmission
      - start
      
  Task:
    title: Task
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      body:
        type: string
    required:  
      - id
      - name
      - body