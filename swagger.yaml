swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Interaction with Users
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: create
  description: Create a new User
- name: delete
  description: Delete an User with its ID
- name: login
  description: Login into the application
- name: logout
  description: Logout from the application
- name: Exams
  description: Exams management


paths:
  /exams/{examID}:
      post:
        security:
          - ApiKeyAuth: []
        tags:
        - "Exams"
        summary: "Modify an existing exam"
        description: "Modify the specified exam"
        operationId: "modifyExam"
        produces: 
        - none
        parameters:
        - name: "examID"
          in: "path"
          description: "ID of the exam"
          required: true
          type: "integer"
          format: "int64"
        responses:
          '200':
            description: Exam created
          '400':
            description: bad input parameter
          '401':
            description: not authorized
          
      delete:
        security:
          - ApiKeyAuth: []
        tags:
        - "Exams"
        summary: "Delete an existing exam"
        description: "Delete the specified exam"
        operationId: "deleteExam"
        produces: 
        - none
        parameters:
        - name: "examID"
          in: "path"
          description: "ID of the exam"
          required: true
          type: "integer"
          format: "int64"
        responses:
          '200':
            description: Exam deleted
          '400':
            description: bad input parameter
          '401':
            description: not authorized
  /Users:
    get:
      tags:
      - delete
      summary: searches inventory
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up inventory
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateUser'
        400:
          description: bad input parameter
          
          
          
    post:
      tags:
      - create
      summary: Create a new User
      operationId: addInventory
      description: This feature helps to create a new user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: CreateUser
        description: Create a new User
        schema:
          $ref: '#/definitions/CreateUser'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
          
          
          
  /Token:
    delete:
      tags:
      - logout
      summary: logs out from the website
      operationId: DeletebyToken
      description: |
        by pressing the right button, the system will log out from the current account and you will have the choice to log in 
      produces:
      - application/json
      responses:
        200:
          description: the user logged out correctly 
          
        400:
          description: the system couldn't logged out correctly  
          
          

 
    post:
      tags:
      - login
      summary: Logs in into the account by giving the right credentials
      operationId: addPost
      description: This feature gives you the opportunity to log in into your own account
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Login 
        description: Login into your account
        schema:
          $ref: '#/definitions/Login'
      responses:
        201:
          description: Logged in successfully 
        400:
          description: invalid input, object invalid
        409:
          description: Could not Logging in successfully
          
          
          
definitions:
  CreateUser:
    type: object
    required:
    - id
    - name
    - lastname
    - username
    - email
    - password
    properties:
      id:
        type: integer
        #format: uuid
        example: 62663
      name:
        type: string
        example: Lorenzo 
      lastname:
        type: string
        example: Framba
      username:
        type: string
        example: montresoruccio
      email:
        type: string
        example: lorenzoframba@gmail.com
      password:
        type: string
        example: oMammaMiaoMammaMia
  Login:
    type: object
    required:
    - username
    - password
    properties:
      username:
        type: string
        example: montresoruccio
      password:
        type: string
        example: oMammaMiaoMammaMia   


# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /LorenzoFramba/Users/1.0.0
schemes:
 - http