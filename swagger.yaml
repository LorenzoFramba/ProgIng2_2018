swagger: '2.0'
info:
  version: '1.0'
  title: "ProgIng2"
  description: API docs of Software Engineering project by Davide Bulbarelli, Davide Piva, Lorenzo Framba, Marco Luzzara, Morgan Malavasi
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
    
host: proging2.herokuapp.com
basePath: /
schemes:
- https
consumes:
- application/json
produces:
- application/json
# tags are used for organizing operations
tags:
- name: create
  description: Create a new User
- name: delete
  description: Delete an User with its ID
- name: login
  description: Login into the application
- name: logout
  description: Logout from the application
- name: Exams
  description: Everything about exam
  
securityDefinitions:
   ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
    
paths:
  /Users:
    get:
      tags:
      - delete
      summary: searches inventory
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up inventory
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateUser'
        400:
          description: bad input parameter
          
          
          
    post:
      tags:
      - create
      summary: Create a new User
      operationId: addInventory
      description: This feature helps to create a new user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: CreateUser
        description: Create a new User
        schema:
          $ref: '#/definitions/CreateUser'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
        
  /Token:
    delete:
      tags:
      - logout
      summary: logs out from the website
      operationId: DeletebyToken
      description: |
        by pressing the right button, the system will log out from the current account and you will have the choice to log in 
      produces:
      - application/json
      responses:
        200:
          description: the user logged out correctly 
          
        400:
          description: the system couldn't logged out correctly  
          
          

 
    post:
      tags:
      - login
      summary: Logs in into the account by giving the right credentials
      operationId: addPost
      description: This feature gives you the opportunity to log in into your own account
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Login 
        description: Login into your account
        schema:
          $ref: '#/definitions/Login'
      responses:
        201:
          description: Logged in successfully 
        400:
          description: invalid input, object invalid
        409:
          description: Could not Logging in successfully

  /exams:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Exams
      summary: List All Exams
      responses:
        200:
          description: Return list of exams
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
          examples:
            application/json:
                exams:
                  - id : 1
                    name : Fisica
                    duration : 30m
                    deadline : 1541688393563
                    dateSubmission : 1541688789590
                    start : null
                  - id : 2
                    name : Algoritmi
                    duration : 1h
                    deadline : 1541688393563
                    dateSubmission : 1541688789590
                    start : 1541688789590
                  - id : 3
                    name : Analisi
                    duration : 45m
                    deadline : 1541688393563
                    dateSubmission : 1541688789590
                    start : 1541688789056
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Exams
      summary: Push an exam
      parameters:
        - in: body
          name : examName
          description: The user to create.
          schema:
            $ref: "#/definitions/Exam"
      responses:
        200:
          description: OK
                    
  /exams/{examId}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Exams
      summary: Returns an exam by ID.
      parameters:
        - in: path
          name: examId
          required: true
          type: integer
          description: Id of the exam to retrieve
      responses:
        200:
          description: Return the exam with specified ID
          schema:
            $ref: '#/definitions/Exam'
          examples:
            application/json:
                id : 3
                name : Analisi
                duration : 45m
                deadline : 1541688393563
                dateSubmission : 1541688789590
                start : 1541688789056
         
definitions:
  CreateUser:
    type: object
    required:
    - id
    - name
    - lastname
    - username
    - email
    - password
    properties:
      id:
        type: integer
        #format: uuid
        example: 62663
      name:
        type: string
        example: Lorenzo 
      lastname:
        type: string
        example: Framba
      username:
        type: string
        example: montresoruccio
      email:
        type: string
        example: lorenzoframba@gmail.com
      password:
        type: string
        example: oMammaMiaoMammaMia
  Login:
    type: object
    required:
    - username
    - password
    properties:
      username:
        type: string
        example: montresoruccio
      password:
        type: string
        example: oMammaMiaoMammaMia   
  Exam:
    title: Exam
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      duration:
        type: string
      deadline:
        type: string
      dateSubmission:
        type: string
      start:
        type: string
    required:  
      - id
      - name
      - duration
      - deadline
      - dateSubmission
      - start